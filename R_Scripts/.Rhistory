# Load necessary libraries
library(ape)
library(phangorn)
library(ggtree)
library(dplyr)
library(ggplot2)
# Set seed for reproducibility
set.seed(1969)
cat("\014")
rm(list = ls())
output_dir <- "/Users/matthewadlam/Supplementary_data/Figures_output/Figure_30"
# Set seed for reproducibility
set.seed(1969)
# Function to remove duplicate sequences from the alignment
remove_duplicates <- function(alignment) {
unique_alignment <- alignment %>%
as.character() %>%
unique() %>%
as.DNAbin()
return(unique_alignment)
}
# Read Clustal alignment file
msa <- read.dna('/Users/matthewadlam/Supplementary_data/Data/Phylo_trees/Acinetobacter.aln', format = 'clustal')
# Remove duplicates from the alignment
msa <- remove_duplicates(msa)
# Ensure unique labels for msa
msa_labels <- labels(msa)
unique_msa_labels <- make.unique(msa_labels)
names(msa) <- unique_msa_labels
# Convert to phyDat object
msa_phyDat <- as.phyDat(msa)
# Create guide tree using the Neighbor-Joining method
guide_tree <- nj(dist.dna(msa))
# Fit the tree using Maximum Likelihood method
fit <- pml(guide_tree, msa_phyDat)
# Optimize the tree including the gamma parameter with multiple rate classes
fit <- optim.pml(fit, model = "GTR", optGamma = TRUE, k = 4)
# Save the fitted tree to a file
write.tree(fit$tree, file = '/Users/matthewadlam/Library/CloudStorage/OneDrive-MasseyUniversity/Supplementary_data/Figures_output/Figure_32_Acinetobacter_fitted_tree_file.nwk')
# Perform bootstrapping with 100 replicates (increase this number when script is finalized)
bs <- bootstrap.pml(fit, bs = 1000, optNni = TRUE)
cat("\014")
rm(list = ls())
output_dir <- "/Users/matthewadlam/Supplementary_data/Figures_output/Figure_30"
# Set seed for reproducibility
set.seed(1969)
# Function to remove duplicate sequences from the alignment
remove_duplicates <- function(alignment) {
unique_alignment <- alignment %>%
as.character() %>%
unique() %>%
as.DNAbin()
return(unique_alignment)
}
# Read Clustal alignment file
msa <- read.dna('/Users/matthewadlam/Supplementary_data/Data/Phylo_trees/Acinetobacter.aln', format = 'clustal')
# Load necessary libraries
library(ape)
library(phangorn)
library(ggtree)
library(dplyr)
library(ggplot2)
# Set seed for reproducibility
set.seed(1969)
cat("\014")
rm(list = ls())
output_dir <- "/Users/matthewadlam/Supplementary_data/Figures_output/Figure_30"
# Set seed for reproducibility
set.seed(1969)
# Function to remove duplicate sequences from the alignment
remove_duplicates <- function(alignment) {
unique_alignment <- alignment %>%
as.character() %>%
unique() %>%
as.DNAbin()
return(unique_alignment)
}
# Read Clustal alignment file
msa <- read.dna('/Users/matthewadlam/Supplementary_data/Data/Phylo_trees/Acinetobacter.aln', format = 'clustal')
# Load necessary libraries
library(ape)
library(phangorn)
library(ggplot2)
library(ggtree)
library(dplyr)
cat("\014")
rm(list = ls())
# Define the output directory
output_dir <- "/Users/matthewadlam/Supplementary_data/Figures_output/Figure_17/"
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Set seed for reproducibility
set.seed(1969)
# Function to remove duplicate sequences from the alignment
remove_duplicates <- function(alignment) {
unique_alignment <- alignment %>%
as.character() %>%
unique() %>%
as.DNAbin()
return(unique_alignment)
}
# Read Clustal alignment file
msa <- read.dna('/Users/matthewadlam/Supplementary_data/Data/Phylo_trees/Paraburkholderia.aln', format = 'clustal')
# Ensure unique labels for msa
msa_labels <- labels(msa)
unique_msa_labels <- make.unique(msa_labels)
names(msa) <- unique_msa_labels
# Convert to phyDat object
msa_phyDat <- as.phyDat(msa)
# Create guide tree using the Neighbor-Joining method
guide_tree <- nj(dist.dna(msa))
# Identify duplicate labels
duplicates <- guide_tree$tip.label[duplicated(guide_tree$tip.label)]
# Remove the second occurrence of "P.terrae"
guide_tree <- drop.tip(guide_tree, duplicates)
# Verify that the duplicate has been removed
print(guide_tree$tip.label)
# # Fit the tree using Maximum Likelihood method
# fit <- pml(guide_tree, msa_phyDat)
#
#
# # Optimize the tree including the gamma parameter with multiple rate classes
# fit <- optim.pml(fit, model = "GTR", optGamma = TRUE, k = 4)
# Fit the tree using Maximum Likelihood method
fit <- pml(guide_tree, msa_phyDat, model = "GTR", optGamma = TRUE, k = 4)
# Optimize with gamma and four rate categories
fit <- optim.pml(fit, model = "GTR", optGamma = TRUE, k = 4)
# Define the output file path dynamically
tree_file <- file.path(output_dir, "Figure_17_Paraburkholderia_fitted_tree_file.nwk")
# Save the fitted tree to the specified file
write.tree(fit$tree, file = tree_file)
# Perform bootstrapping with 100 replicates (increase this number when script is finalized)
bs <- bootstrap.pml(fit, bs = 1000, optNni = TRUE)
# Compute the majority-rule consensus tree
consensus_tree <- consensus(bs, p = 0.5)
# Assign the bootstrap values to the consensus tree's node labels as percentages
consensus_tree$node.label <- prop.clades(consensus_tree, bs) / 10
# Relabel the fitted tree with bootstrap node labels
fit$tree$node.label <- consensus_tree$node.label
# Remove specific tree tips (species) to tidy up plots (alignment overkill)
species_to_remove <- c("E.coli", "M.tuberculosis", "N.gonorrhoeae", "S.enterica", "Y.pestis", "L.monocytogenes", "S.aureus", "R.rickettsii", "B.cepacia", "P.benzopyrenica", "B.fragilis")
# Drop the specified tips from the tree
fit$tree <- drop.tip(fit$tree, species_to_remove)
# Format the species names to be italicized
italic_species_labels <- sapply(fit$tree$tip.label, function(x) as.expression(bquote(italic(.(x)))))
# Convert the italic_species_labels to character for proper mapping
italic_species_labels_char <- sapply(italic_species_labels, as.character)
# Visualize the bootstrapped ML tree with formatted species names and percentage node labels
tree_plot <- ggtree(fit$tree) +
geom_tiplab(label = italic_species_labels_char, parse = TRUE, size = 2.5) +
geom_text2(aes(subset = !isTip, label = round(as.numeric(label), 0)), hjust = -0.3, size = 2.5) +
theme_tree2() +
ggtitle("Bootstrapped Maximum Likelihood Tree with Support Values") +
theme(plot.title = element_text(size = 12))
# Define output file paths dynamically
consensus_tree_file <- file.path(output_dir, "Figure_17_Paraburkholderia_bootstrapped_consensus_tree.nwk")
tree_plot_file <- file.path(output_dir, "Figure_17_Paraburkholderia_bootstrapped_tree_plot.pdf")
# Save the consensus tree with bootstrap values as a Newick file
write.tree(fit$tree, file = consensus_tree_file)
# Save the tree plot
ggsave(tree_plot_file, plot = tree_plot)
# Print the tree plot
print(tree_plot)
