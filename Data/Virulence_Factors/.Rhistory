# Load necessary libraries
library(pheatmap)
library(readr)
library(dplyr)
library(tidyr)
library(tibble)
library(stringr)
library(grDevices)
library(grid)
# Load the data
ma1265 <- read_tsv("/Users/matthewadlam/Dropbox/Ostrowski-Lab-New/Lab_Members/Matt_Adlam/Thesis_figures/Genomics_figures/Virulence_Factors/VFDB_ma1265.txt", col_types = cols(.default = "c"))
colnames(ma1265) <- ma1265[1, ]
ma1265 <- ma1265[-c(1, 2), ]
# Replace NA or empty column names with the correct name
colnames(ma1265)[is.na(colnames(ma1265)) | colnames(ma1265) == ""] <- "P.syringae 1448A"
# Fill down the values in the first two columns
ma1265_filled <- ma1265 %>%
fill(VFclass, `Virulence factors`, .direction = "down") %>%
select(-`P.syringae pv. phaseolicola 1448A`)
ma102 <- read_tsv("/Users/matthewadlam/Dropbox/Ostrowski-Lab-New/Lab_Members/Matt_Adlam/Thesis_figures/Genomics_figures/Virulence_Factors/VFDB_ma102.txt", col_types = cols(.default = "c"))
colnames(ma102) <- ma102[1, ]
ma102 <- ma102[-c(1, 2), ]
# Replace NA or empty column names with the correct name
colnames(ma102)[is.na(colnames(ma102)) | colnames(ma102) == ""] <- "P.syringae 1448A"
# Fill down the values in the first two columns
ma102_filled <- ma102 %>%
fill(VFclass, `Virulence factors`, .direction = "down") %>%
select(-c(`P.syringae pv. phaseolicola 1448A`))
# Remove common columns from ma1265_filled, except for "Related genes"
columns_to_exclude <- setdiff(names(ma1265_filled), c("Related genes", names(ma102_filled)))
ma1265_unique <- ma1265_filled %>% select(`Related genes`, all_of(columns_to_exclude))
# Join the data frames on "Related genes"
merged_data <- full_join(ma102_filled, ma1265_unique, by = "Related genes") %>%
select(-c("P.aeruginosa PA7", "P.aeruginosa LESB58", "P.aeruginosa UCBPP-PA14"))
# Remove text within parentheses including the parentheses
merged_data <- merged_data %>% mutate(`Virulence factors` = str_replace_all(`Virulence factors`, "\\(.*?\\)", ""))
# Convert cells containing '-' to 0, and all other values to 1, excluding the first three columns
data_binary <- merged_data %>%
mutate(across(-c(VFclass, `Virulence factors`, `Related genes`), ~ ifelse(. == "-", 0, 1)))
# Remove rows where both `ma1265(Prediction)` and `ma102(Prediction)` are 0
filtered_binary_data <- data_binary %>%
filter(!(`ma102(Prediction)` == 0 & `ma1265(Prediction)` == 0)) %>%
rename(MA102 = `ma102(Prediction)`, MA1265 = `ma1265(Prediction)`)
# Remove rows with NA in VFclass
filtered_binary_data <- filtered_binary_data %>% filter(!is.na(VFclass))
# Remove rows where all columns (except VFclass, Virulence factors, and Related genes) are zeros
filtered_binary_data <- filtered_binary_data %>%
rowwise() %>%
filter(sum(c_across(-c(VFclass, `Virulence factors`, `Related genes`)), na.rm = TRUE) > 0) %>%
ungroup()
# Ensure 'Related genes' is a character and replace NA values
filtered_binary_data <- filtered_binary_data %>%
mutate(`Related genes` = ifelse(is.na(`Related genes`) | `Related genes` == "", "Unknown", `Related genes`)) %>%
mutate(`Related genes` = as.character(`Related genes`))
# Create unique row names using 'Related genes' column
filtered_binary_data <- filtered_binary_data %>%
mutate(`Related genes` = make.unique(`Related genes`)) %>%
column_to_rownames(var = "Related genes")
# Create annotation for 'Virulence factors'
annotation <- filtered_binary_data %>% select(`Virulence factors`)
# Load the expanded_gen_pal.tsv file to get hex codes for the virulence factors
hex_colors <- read_tsv("/Users/matthewadlam/Dropbox/Ostrowski-Lab-New/Lab_Members/Matt_Adlam/Thesis_figures/Metagenomics/Data/expanded_gen_pal.tsv")
# Extract unique Virulence factors and their corresponding hex colors
unique_factors <- unique(annotation$`Virulence factors`)
factor_colors <- setNames(hex_colors$hex_code[match(unique_factors, hex_colors$factor)], unique_factors)
# Define a custom color palette: white for absence (0), blue for presence (1)
custom_colors <- c("white", "blue")
# Order data by 'Virulence factors' and reverse the order
ordered_data <- filtered_binary_data[order(filtered_binary_data$`Virulence factors`), ]
reversed_data <- ordered_data[nrow(ordered_data):1, ]
# Reorder annotations to match the reversed data
annotation <- annotation[rownames(reversed_data), , drop = FALSE]
# Create a PDF file for the heatmap
pdf("Presence_Absence_Heatmap_Enhanced_with_Custom_Colors.pdf", width = 10, height = 28)
# Generate the heatmap with annotation and customized color palette
pheatmap(as.matrix(reversed_data[, -c(1, 2)]), cluster_rows = FALSE, cluster_cols = TRUE,
color = custom_colors,  # Custom color scale for presence/absence
main = "Presence/Absence Heatmap",
fontsize_row = 8, fontsize_col = 8,
annotation_row = annotation,
annotation_colors = list(`Virulence factors` = factor_colors),
show_rownames = FALSE,  # Do not show row names
use_raster = FALSE)  # Turn off rasterization
# Close the PDF device
dev.off()
# Load necessary libraries
library(ComplexHeatmap)
library(circlize)
# Prepare the data matrix
data_matrix <- as.matrix(filtered_binary_data[, -c(1, 2)])
# Load the color palette and map it
color_palette <- read_tsv("/Users/matthewadlam/Dropbox/Ostrowski-Lab-New/Lab_Members/Matt_Adlam/Thesis_figures/Metagenomics/Data/expanded_gen_pal_2.txt", col_types = cols(.default = "c"))
# Exclude white color (#FFFFFF and #FFFFFFFF) from the palette
available_colors <- color_palette$hex_code[!color_palette$hex_code %in% c("#FFFFFF", "#FFFFFFFF")]
unique_factors <- unique(filtered_binary_data$`Virulence factors`)
# Ensure sufficient colors
if (length(unique_factors) > length(available_colors)) {
stop("Not enough unique colors in the palette for the number of virulence factors.")
}
# Sample and map colors
set.seed(1969)
virulence_colors <- sample(available_colors, length(unique_factors), replace = FALSE)
named_colors <- setNames(virulence_colors, unique_factors)
# Explicitly check and replace any remaining white colors
named_colors[named_colors == "#FFFFFF"] <- available_colors[1]
named_colors[named_colors == "#FFFFFFFF"] <- available_colors[2]
# Create a color matrix to apply virulence factor colors to each row
color_matrix <- matrix(named_colors[filtered_binary_data$`Virulence factors`],
nrow = nrow(data_matrix), ncol = ncol(data_matrix), byrow = FALSE)
# Create annotation for rows with colors for virulence factors
row_anno <- rowAnnotation(Virulence_Factors = filtered_binary_data$`Virulence factors`,
col = list(Virulence_Factors = named_colors),
annotation_label = "Virulence factors")
# Create a PDF file for the heatmap
pdf("Presence_Absence_Heatmap_No_White_Final.pdf", width = 10, height = 28)
# Generate the heatmap with row-specific colors
Heatmap(data_matrix,
name = "Presence/Absence",
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
col = colorRamp2(c(0, 1), c("white", "darkred")),  # Adjust color function as needed
cell_fun = function(j, i, x, y, width, height, fill) {
if (is.na(data_matrix[i, j])) {
grid.rect(x = x, y = y, width = width, height = height,
gp = gpar(fill = "white", col = NA))  # Fill with white for NA
} else if (data_matrix[i, j] == 1) {
grid.rect(x = x, y = y, width = width, height = height,
gp = gpar(fill = color_matrix[i, j], col = NA))  # Fill with factor color for presence
} else {
grid.rect(x = x, y = y, width = width, height = height,
gp = gpar(fill = "white", col = NA))  # Fill with white for absence
}
},
right_annotation = row_anno,  # Add row annotation to the right
cluster_rows = FALSE,
cluster_columns = TRUE,
show_row_names = FALSE)
# Close the PDF device
dev.off()
